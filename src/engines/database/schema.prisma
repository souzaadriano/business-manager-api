generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permissions {
  id              String            @id
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  deletedAt       DateTime?
  RolePermissions RolePermissions[]
  UserPermissions UserPermissions[]

  @@map("permissions")
}

model Roles {
  id              String            @id
  name            String            @unique
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @default(now())
  deletedAt       DateTime?
  RolePermissions RolePermissions[]
  UserRoles       UserRoles[]

  @@map("roles")
}

model RolePermissions {
  roleId       String
  permissionId String
  role         Roles       @relation(fields: [roleId], references: [id])
  permissions  Permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRoles {
  roleId String
  userId String
  role   Roles  @relation(fields: [roleId], references: [id])
  user   Users  @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("user_roles")
}

model UserPermissions {
  permissionId String
  userId       String
  status       Boolean
  permissions  Permissions @relation(fields: [permissionId], references: [id])
  user         Users       @relation(fields: [userId], references: [id])

  @@id([permissionId, userId])
  @@map("user_permissions")
}

model Address {
  id           String         @id
  street       String
  neighborhood String
  country      String
  number       String
  complement   String
  updatedAt    DateTime
  StoreProfile StoreProfile[]

  @@map("address")
}

model Categories {
  id      String @id
  storeId String
  name    String

  store    Stores     @relation(fields: [storeId], references: [id])
  Products Products[]

  @@unique([storeId, name])
  @@map("categories")
}

model Products {
  id          String  @id
  categoryId  String
  storeId     String
  name        String
  description String
  price       Decimal @db.Money
  picture     String

  createdAt DateTime
  updateAt  DateTime
  deletedAt DateTime?

  store        Stores         @relation(fields: [storeId], references: [id])
  category     Categories     @relation(fields: [categoryId], references: [id])
  PriceHistory PriceHistory[]

  @@map("products")
}

model PriceHistory {
  productId String
  changedAt DateTime @default(now())
  price     Decimal  @db.Money
  product   Products @relation(fields: [productId], references: [id])

  @@id([productId, changedAt])
  @@map("price_history")
}

model ExceptionStatus {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  @@map("exception_status")
}

model Stores {
  id        String    @id
  name      String    @unique
  owner     String
  createdAt DateTime
  updatedAt DateTime
  deletedAt DateTime?

  user         Users          @relation(fields: [owner], references: [id])
  UserStore    UserStore[]
  StoreProfile StoreProfile[]
  Categories   Categories[]
  Products     Products[]

  @@map("stores")
}

model UserStore {
  storeId String
  userId  String

  user  Users  @relation(fields: [userId], references: [id])
  store Stores @relation(fields: [storeId], references: [id])

  @@id([storeId, userId])
  @@map("user_store")
}

model StoreProfile {
  storeId   String
  addressId String
  logo      String?

  store   Stores  @relation(fields: [storeId], references: [id])
  address Address @relation(fields: [addressId], references: [id])

  @@id([storeId])
  @@map("store_profile")
}

model Users {
  id              String            @id
  name            String
  email           String            @unique
  hash            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  deletedAt       DateTime?
  UserRoles       UserRoles[]
  UserPermissions UserPermissions[]
  Stores          Stores[]
  UserStore       UserStore[]

  @@index([email])
  @@map("users")
}
